;; Auto-generated. Do not edit!


(when (boundp 'grasp_execution_msgs::GraspControlGoal)
  (if (not (find-package "GRASP_EXECUTION_MSGS"))
    (make-package "GRASP_EXECUTION_MSGS"))
  (shadow 'GraspControlGoal (find-package "GRASP_EXECUTION_MSGS")))
(unless (find-package "GRASP_EXECUTION_MSGS::GRASPCONTROLGOAL")
  (make-package "GRASP_EXECUTION_MSGS::GRASPCONTROLGOAL"))

(in-package "ROS")
;;//! \htmlinclude GraspControlGoal.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))
(if (not (find-package "TRAJECTORY_MSGS"))
  (ros::roseus-add-msgs "trajectory_msgs"))


(defclass grasp_execution_msgs::GraspControlGoal
  :super ros::object
  :slots (_target_joint_state _trajectory _use_trajectory _closing ))

(defmethod grasp_execution_msgs::GraspControlGoal
  (:init
   (&key
    ((:target_joint_state __target_joint_state) (instance sensor_msgs::JointState :init))
    ((:trajectory __trajectory) (instance trajectory_msgs::JointTrajectory :init))
    ((:use_trajectory __use_trajectory) nil)
    ((:closing __closing) nil)
    )
   (send-super :init)
   (setq _target_joint_state __target_joint_state)
   (setq _trajectory __trajectory)
   (setq _use_trajectory __use_trajectory)
   (setq _closing __closing)
   self)
  (:target_joint_state
   (&rest __target_joint_state)
   (if (keywordp (car __target_joint_state))
       (send* _target_joint_state __target_joint_state)
     (progn
       (if __target_joint_state (setq _target_joint_state (car __target_joint_state)))
       _target_joint_state)))
  (:trajectory
   (&rest __trajectory)
   (if (keywordp (car __trajectory))
       (send* _trajectory __trajectory)
     (progn
       (if __trajectory (setq _trajectory (car __trajectory)))
       _trajectory)))
  (:use_trajectory
   (&optional __use_trajectory)
   (if __use_trajectory (setq _use_trajectory __use_trajectory)) _use_trajectory)
  (:closing
   (&optional __closing)
   (if __closing (setq _closing __closing)) _closing)
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/JointState _target_joint_state
    (send _target_joint_state :serialization-length)
    ;; trajectory_msgs/JointTrajectory _trajectory
    (send _trajectory :serialization-length)
    ;; bool _use_trajectory
    1
    ;; bool _closing
    1
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/JointState _target_joint_state
       (send _target_joint_state :serialize s)
     ;; trajectory_msgs/JointTrajectory _trajectory
       (send _trajectory :serialize s)
     ;; bool _use_trajectory
       (if _use_trajectory (write-byte -1 s) (write-byte 0 s))
     ;; bool _closing
       (if _closing (write-byte -1 s) (write-byte 0 s))
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/JointState _target_joint_state
     (send _target_joint_state :deserialize buf ptr-) (incf ptr- (send _target_joint_state :serialization-length))
   ;; trajectory_msgs/JointTrajectory _trajectory
     (send _trajectory :deserialize buf ptr-) (incf ptr- (send _trajectory :serialization-length))
   ;; bool _use_trajectory
     (setq _use_trajectory (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;; bool _closing
     (setq _closing (not (= 0 (sys::peek buf ptr- :char)))) (incf ptr- 1)
   ;;
   self)
  )

(setf (get grasp_execution_msgs::GraspControlGoal :md5sum-) "f165f7e4a930636e7a3721777f2e4b0c")
(setf (get grasp_execution_msgs::GraspControlGoal :datatype-) "grasp_execution_msgs/GraspControlGoal")
(setf (get grasp_execution_msgs::GraspControlGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# This action sends a command to the hand to open or close the grasp.
# It can be used like a JointTrajectory action. Alternatively, the joint
# trajectory can be left unspecified, and the hand just closes.
# Accepting nodes can handle force feedback control or stop closing
# the fingers before the target joint state, if they are not moving any more. 

# The target joint state. This may include the efforts which
# the hand is to apply once the grip is closed.
sensor_msgs/JointState target_joint_state

# optional: if the gripper movement is more complex, it can be specified
# as a joint trajectory action. In this case, target_joint_state should
# be set to the last state in the JointTrajectory
trajectory_msgs/JointTrajectory trajectory

# If the joint trajectory is to be used instead of the simple closing action,
# set this to true. If this is false, the trajectory field is ingnored.
bool use_trajectory

# true if this is an action to close the hand, false if it is opening.
bool closing


================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

")



(provide :grasp_execution_msgs/GraspControlGoal "f165f7e4a930636e7a3721777f2e4b0c")


