; Auto-generated. Do not edit!


(cl:in-package grasp_execution_msgs-msg)


;//! \htmlinclude GraspControlGoal.msg.html

(cl:defclass <GraspControlGoal> (roslisp-msg-protocol:ros-message)
  ((target_joint_state
    :reader target_joint_state
    :initarg :target_joint_state
    :type sensor_msgs-msg:JointState
    :initform (cl:make-instance 'sensor_msgs-msg:JointState))
   (trajectory
    :reader trajectory
    :initarg :trajectory
    :type trajectory_msgs-msg:JointTrajectory
    :initform (cl:make-instance 'trajectory_msgs-msg:JointTrajectory))
   (use_trajectory
    :reader use_trajectory
    :initarg :use_trajectory
    :type cl:boolean
    :initform cl:nil)
   (closing
    :reader closing
    :initarg :closing
    :type cl:boolean
    :initform cl:nil))
)

(cl:defclass GraspControlGoal (<GraspControlGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <GraspControlGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'GraspControlGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name grasp_execution_msgs-msg:<GraspControlGoal> is deprecated: use grasp_execution_msgs-msg:GraspControlGoal instead.")))

(cl:ensure-generic-function 'target_joint_state-val :lambda-list '(m))
(cl:defmethod target_joint_state-val ((m <GraspControlGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader grasp_execution_msgs-msg:target_joint_state-val is deprecated.  Use grasp_execution_msgs-msg:target_joint_state instead.")
  (target_joint_state m))

(cl:ensure-generic-function 'trajectory-val :lambda-list '(m))
(cl:defmethod trajectory-val ((m <GraspControlGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader grasp_execution_msgs-msg:trajectory-val is deprecated.  Use grasp_execution_msgs-msg:trajectory instead.")
  (trajectory m))

(cl:ensure-generic-function 'use_trajectory-val :lambda-list '(m))
(cl:defmethod use_trajectory-val ((m <GraspControlGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader grasp_execution_msgs-msg:use_trajectory-val is deprecated.  Use grasp_execution_msgs-msg:use_trajectory instead.")
  (use_trajectory m))

(cl:ensure-generic-function 'closing-val :lambda-list '(m))
(cl:defmethod closing-val ((m <GraspControlGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader grasp_execution_msgs-msg:closing-val is deprecated.  Use grasp_execution_msgs-msg:closing instead.")
  (closing m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <GraspControlGoal>) ostream)
  "Serializes a message object of type '<GraspControlGoal>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'target_joint_state) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'trajectory) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'use_trajectory) 1 0)) ostream)
  (cl:write-byte (cl:ldb (cl:byte 8 0) (cl:if (cl:slot-value msg 'closing) 1 0)) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <GraspControlGoal>) istream)
  "Deserializes a message object of type '<GraspControlGoal>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'target_joint_state) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'trajectory) istream)
    (cl:setf (cl:slot-value msg 'use_trajectory) (cl:not (cl:zerop (cl:read-byte istream))))
    (cl:setf (cl:slot-value msg 'closing) (cl:not (cl:zerop (cl:read-byte istream))))
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<GraspControlGoal>)))
  "Returns string type for a message object of type '<GraspControlGoal>"
  "grasp_execution_msgs/GraspControlGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'GraspControlGoal)))
  "Returns string type for a message object of type 'GraspControlGoal"
  "grasp_execution_msgs/GraspControlGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<GraspControlGoal>)))
  "Returns md5sum for a message object of type '<GraspControlGoal>"
  "f165f7e4a930636e7a3721777f2e4b0c")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'GraspControlGoal)))
  "Returns md5sum for a message object of type 'GraspControlGoal"
  "f165f7e4a930636e7a3721777f2e4b0c")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<GraspControlGoal>)))
  "Returns full string definition for message of type '<GraspControlGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# This action sends a command to the hand to open or close the grasp.~%# It can be used like a JointTrajectory action. Alternatively, the joint~%# trajectory can be left unspecified, and the hand just closes.~%# Accepting nodes can handle force feedback control or stop closing~%# the fingers before the target joint state, if they are not moving any more. ~%~%# The target joint state. This may include the efforts which~%# the hand is to apply once the grip is closed.~%sensor_msgs/JointState target_joint_state~%~%# optional: if the gripper movement is more complex, it can be specified~%# as a joint trajectory action. In this case, target_joint_state should~%# be set to the last state in the JointTrajectory~%trajectory_msgs/JointTrajectory trajectory~%~%# If the joint trajectory is to be used instead of the simple closing action,~%# set this to true. If this is false, the trajectory field is ingnored.~%bool use_trajectory~%~%# true if this is an action to close the hand, false if it is opening.~%bool closing~%~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: trajectory_msgs/JointTrajectory~%Header header~%string[] joint_names~%JointTrajectoryPoint[] points~%================================================================================~%MSG: trajectory_msgs/JointTrajectoryPoint~%# Each trajectory point specifies either positions[, velocities[, accelerations]]~%# or positions[, effort] for the trajectory to be executed.~%# All specified values are in the same order as the joint names in JointTrajectory.msg~%~%float64[] positions~%float64[] velocities~%float64[] accelerations~%float64[] effort~%duration time_from_start~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'GraspControlGoal)))
  "Returns full string definition for message of type 'GraspControlGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%# This action sends a command to the hand to open or close the grasp.~%# It can be used like a JointTrajectory action. Alternatively, the joint~%# trajectory can be left unspecified, and the hand just closes.~%# Accepting nodes can handle force feedback control or stop closing~%# the fingers before the target joint state, if they are not moving any more. ~%~%# The target joint state. This may include the efforts which~%# the hand is to apply once the grip is closed.~%sensor_msgs/JointState target_joint_state~%~%# optional: if the gripper movement is more complex, it can be specified~%# as a joint trajectory action. In this case, target_joint_state should~%# be set to the last state in the JointTrajectory~%trajectory_msgs/JointTrajectory trajectory~%~%# If the joint trajectory is to be used instead of the simple closing action,~%# set this to true. If this is false, the trajectory field is ingnored.~%bool use_trajectory~%~%# true if this is an action to close the hand, false if it is opening.~%bool closing~%~%~%================================================================================~%MSG: sensor_msgs/JointState~%# This is a message that holds data to describe the state of a set of torque controlled joints. ~%#~%# The state of each joint (revolute or prismatic) is defined by:~%#  * the position of the joint (rad or m),~%#  * the velocity of the joint (rad/s or m/s) and ~%#  * the effort that is applied in the joint (Nm or N).~%#~%# Each joint is uniquely identified by its name~%# The header specifies the time at which the joint states were recorded. All the joint states~%# in one message have to be recorded at the same time.~%#~%# This message consists of a multiple arrays, one for each part of the joint state. ~%# The goal is to make each of the fields optional. When e.g. your joints have no~%# effort associated with them, you can leave the effort array empty. ~%#~%# All arrays in this message should have the same size, or be empty.~%# This is the only way to uniquely associate the joint name with the correct~%# states.~%~%~%Header header~%~%string[] name~%float64[] position~%float64[] velocity~%float64[] effort~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: trajectory_msgs/JointTrajectory~%Header header~%string[] joint_names~%JointTrajectoryPoint[] points~%================================================================================~%MSG: trajectory_msgs/JointTrajectoryPoint~%# Each trajectory point specifies either positions[, velocities[, accelerations]]~%# or positions[, effort] for the trajectory to be executed.~%# All specified values are in the same order as the joint names in JointTrajectory.msg~%~%float64[] positions~%float64[] velocities~%float64[] accelerations~%float64[] effort~%duration time_from_start~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <GraspControlGoal>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'target_joint_state))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'trajectory))
     1
     1
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <GraspControlGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'GraspControlGoal
    (cl:cons ':target_joint_state (target_joint_state msg))
    (cl:cons ':trajectory (trajectory msg))
    (cl:cons ':use_trajectory (use_trajectory msg))
    (cl:cons ':closing (closing msg))
))
