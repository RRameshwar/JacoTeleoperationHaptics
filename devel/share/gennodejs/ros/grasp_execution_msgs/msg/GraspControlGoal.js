// Auto-generated. Do not edit!

// (in-package grasp_execution_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let trajectory_msgs = _finder('trajectory_msgs');
let sensor_msgs = _finder('sensor_msgs');

//-----------------------------------------------------------

class GraspControlGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.target_joint_state = null;
      this.trajectory = null;
      this.use_trajectory = null;
      this.closing = null;
    }
    else {
      if (initObj.hasOwnProperty('target_joint_state')) {
        this.target_joint_state = initObj.target_joint_state
      }
      else {
        this.target_joint_state = new sensor_msgs.msg.JointState();
      }
      if (initObj.hasOwnProperty('trajectory')) {
        this.trajectory = initObj.trajectory
      }
      else {
        this.trajectory = new trajectory_msgs.msg.JointTrajectory();
      }
      if (initObj.hasOwnProperty('use_trajectory')) {
        this.use_trajectory = initObj.use_trajectory
      }
      else {
        this.use_trajectory = false;
      }
      if (initObj.hasOwnProperty('closing')) {
        this.closing = initObj.closing
      }
      else {
        this.closing = false;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type GraspControlGoal
    // Serialize message field [target_joint_state]
    bufferOffset = sensor_msgs.msg.JointState.serialize(obj.target_joint_state, buffer, bufferOffset);
    // Serialize message field [trajectory]
    bufferOffset = trajectory_msgs.msg.JointTrajectory.serialize(obj.trajectory, buffer, bufferOffset);
    // Serialize message field [use_trajectory]
    bufferOffset = _serializer.bool(obj.use_trajectory, buffer, bufferOffset);
    // Serialize message field [closing]
    bufferOffset = _serializer.bool(obj.closing, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type GraspControlGoal
    let len;
    let data = new GraspControlGoal(null);
    // Deserialize message field [target_joint_state]
    data.target_joint_state = sensor_msgs.msg.JointState.deserialize(buffer, bufferOffset);
    // Deserialize message field [trajectory]
    data.trajectory = trajectory_msgs.msg.JointTrajectory.deserialize(buffer, bufferOffset);
    // Deserialize message field [use_trajectory]
    data.use_trajectory = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [closing]
    data.closing = _deserializer.bool(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += sensor_msgs.msg.JointState.getMessageSize(object.target_joint_state);
    length += trajectory_msgs.msg.JointTrajectory.getMessageSize(object.trajectory);
    return length + 2;
  }

  static datatype() {
    // Returns string type for a message object
    return 'grasp_execution_msgs/GraspControlGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'f165f7e4a930636e7a3721777f2e4b0c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # This action sends a command to the hand to open or close the grasp.
    # It can be used like a JointTrajectory action. Alternatively, the joint
    # trajectory can be left unspecified, and the hand just closes.
    # Accepting nodes can handle force feedback control or stop closing
    # the fingers before the target joint state, if they are not moving any more. 
    
    # The target joint state. This may include the efforts which
    # the hand is to apply once the grip is closed.
    sensor_msgs/JointState target_joint_state
    
    # optional: if the gripper movement is more complex, it can be specified
    # as a joint trajectory action. In this case, target_joint_state should
    # be set to the last state in the JointTrajectory
    trajectory_msgs/JointTrajectory trajectory
    
    # If the joint trajectory is to be used instead of the simple closing action,
    # set this to true. If this is false, the trajectory field is ingnored.
    bool use_trajectory
    
    # true if this is an action to close the hand, false if it is opening.
    bool closing
    
    
    ================================================================================
    MSG: sensor_msgs/JointState
    # This is a message that holds data to describe the state of a set of torque controlled joints. 
    #
    # The state of each joint (revolute or prismatic) is defined by:
    #  * the position of the joint (rad or m),
    #  * the velocity of the joint (rad/s or m/s) and 
    #  * the effort that is applied in the joint (Nm or N).
    #
    # Each joint is uniquely identified by its name
    # The header specifies the time at which the joint states were recorded. All the joint states
    # in one message have to be recorded at the same time.
    #
    # This message consists of a multiple arrays, one for each part of the joint state. 
    # The goal is to make each of the fields optional. When e.g. your joints have no
    # effort associated with them, you can leave the effort array empty. 
    #
    # All arrays in this message should have the same size, or be empty.
    # This is the only way to uniquely associate the joint name with the correct
    # states.
    
    
    Header header
    
    string[] name
    float64[] position
    float64[] velocity
    float64[] effort
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: trajectory_msgs/JointTrajectory
    Header header
    string[] joint_names
    JointTrajectoryPoint[] points
    ================================================================================
    MSG: trajectory_msgs/JointTrajectoryPoint
    # Each trajectory point specifies either positions[, velocities[, accelerations]]
    # or positions[, effort] for the trajectory to be executed.
    # All specified values are in the same order as the joint names in JointTrajectory.msg
    
    float64[] positions
    float64[] velocities
    float64[] accelerations
    float64[] effort
    duration time_from_start
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new GraspControlGoal(null);
    if (msg.target_joint_state !== undefined) {
      resolved.target_joint_state = sensor_msgs.msg.JointState.Resolve(msg.target_joint_state)
    }
    else {
      resolved.target_joint_state = new sensor_msgs.msg.JointState()
    }

    if (msg.trajectory !== undefined) {
      resolved.trajectory = trajectory_msgs.msg.JointTrajectory.Resolve(msg.trajectory)
    }
    else {
      resolved.trajectory = new trajectory_msgs.msg.JointTrajectory()
    }

    if (msg.use_trajectory !== undefined) {
      resolved.use_trajectory = msg.use_trajectory;
    }
    else {
      resolved.use_trajectory = false
    }

    if (msg.closing !== undefined) {
      resolved.closing = msg.closing;
    }
    else {
      resolved.closing = false
    }

    return resolved;
    }
};

module.exports = GraspControlGoal;
