// Generated by gencpp from file grasp_execution_msgs/GraspActionGoal.msg
// DO NOT EDIT!


#ifndef GRASP_EXECUTION_MSGS_MESSAGE_GRASPACTIONGOAL_H
#define GRASP_EXECUTION_MSGS_MESSAGE_GRASPACTIONGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <actionlib_msgs/GoalID.h>
#include <grasp_execution_msgs/GraspGoal.h>

namespace grasp_execution_msgs
{
template <class ContainerAllocator>
struct GraspActionGoal_
{
  typedef GraspActionGoal_<ContainerAllocator> Type;

  GraspActionGoal_()
    : header()
    , goal_id()
    , goal()  {
    }
  GraspActionGoal_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , goal_id(_alloc)
    , goal(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef  ::actionlib_msgs::GoalID_<ContainerAllocator>  _goal_id_type;
  _goal_id_type goal_id;

   typedef  ::grasp_execution_msgs::GraspGoal_<ContainerAllocator>  _goal_type;
  _goal_type goal;





  typedef boost::shared_ptr< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GraspActionGoal_

typedef ::grasp_execution_msgs::GraspActionGoal_<std::allocator<void> > GraspActionGoal;

typedef boost::shared_ptr< ::grasp_execution_msgs::GraspActionGoal > GraspActionGoalPtr;
typedef boost::shared_ptr< ::grasp_execution_msgs::GraspActionGoal const> GraspActionGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator1> & lhs, const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.goal_id == rhs.goal_id &&
    lhs.goal == rhs.goal;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator1> & lhs, const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_execution_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7e0f500a2cd74e04525e295c7517b6b";
  }

  static const char* value(const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7e0f500a2cd74e0ULL;
  static const uint64_t static_value2 = 0x4525e295c7517b6bULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_execution_msgs/GraspActionGoal";
  }

  static const char* value(const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"\n"
"Header header\n"
"actionlib_msgs/GoalID goal_id\n"
"GraspGoal goal\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: actionlib_msgs/GoalID\n"
"# The stamp should store the time at which this goal was requested.\n"
"# It is used by an action server when it tries to preempt all\n"
"# goals that were requested before a certain time\n"
"time stamp\n"
"\n"
"# The id provides a way to associate feedback and\n"
"# result message with specific goal requests. The id\n"
"# specified must be unique.\n"
"string id\n"
"\n"
"\n"
"================================================================================\n"
"MSG: grasp_execution_msgs/GraspGoal\n"
"# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# the grasp / ungrasp to perform\n"
"grasp_execution_msgs/GraspData grasp \n"
"\n"
"# true if this is a grasping action,\n"
"# false if this is an ungrasp action.\n"
"bool is_grasp\n"
"\n"
"# For an ungrasping action, there may be an expected\n"
"# end effector pose for the action to be eligible,\n"
"# e.g. at a pose where to place an object.\n"
"# The expected end effector pose is specified in \n"
"# GraspData.grasp.grasp_pose (for both grasping and\n"
"# ungrasping actions). However sometimes,\n"
"# the action should be eligible anywhere\n"
"# (i.e. the object may be dropped anywhere).\n"
"# To allow the ungrasp action to be eligible anywhere,\n"
"# set this to true.\n"
"bool ignore_effector_pose_ungrasp\n"
"\n"
"# The joint trajectory to move from curr_effector_pose \n"
"# along the *approach* GripperTranslation specified\n"
"# in the Grasp.msg message (contained in GraspData.msg).\n"
"# For an ungrasp action, this trajectory should not include\n"
"# the gripper joints, because they should not move while\n"
"# holding the object, and the exact state of the grippers\n"
"# while holding the object can vary and\n"
"# cannot be foreseen exactly.\n"
"trajectory_msgs/JointTrajectory gripper_approach_trajectory\n"
"\n"
"# The joint trajectory to move from the grasp pose, after\n"
"# doint the grasp, along the *retreat* GripperTranslation specified\n"
"# in the Grasp.msg message (contained in GraspData.msg).\n"
"# For a grasp action, this trajectory should not include\n"
"# the gripper joints, because they should not move while\n"
"# holding the object, and the exact state of the grippers\n"
"# while holding the object can vary and\n"
"# cannot be foreseen exactly.\n"
"trajectory_msgs/JointTrajectory gripper_retreat_trajectory\n"
"\n"
"# The joint trajectory to open/close the grippers, i.e. to move from\n"
"# GraspData.grasp.pre_grasp_posture to\n"
"# GraspData.grasp.grasp_posture, or the other way round if\n"
"# this is an action to un-grasp.\n"
"# In its simplest form, the first point in this trajectory\n"
"# is the current joint state, and the second point is\n"
"# the target state specified in grasp.grasp.grasp_posture\n"
"# if this is a grasp, or grasp.grasp.pre_grasp_posture if\n"
"# this is an ungrasp.\n"
"trajectory_msgs/JointTrajectory grasp_trajectory\n"
"\n"
"# set to true if you want to use effector_pos_tolerance,\n"
"# effector_angle_tolerance and joint_angles_tolerance\n"
"# for determining whether the end effector / the joints\n"
"# are at the correct pose.\n"
"# Set to false if default tolerances are to be used.\n"
"bool use_custom_tolerances\n"
"\n"
"# the grasp is only executed if the robot's effector is at the\n"
"# correct pose, plus this tolerance\n"
"float32 effector_pos_tolerance\n"
"\n"
"# the grasp is only executed if the robot's effector is at the\n"
"# correct orientation, plus this tolerance (in rad)\n"
"float32 effector_angle_tolerance\n"
"\n"
"# tolerance allowed for all joints to be at a desirec\n"
"# position (GraspData.grasp.grasp_posture and\n"
"# GraspData.grasp.pre_grasp_posture). \n"
"float32 joint_angles_tolerance\n"
"\n"
"\n"
"#####################################################\n"
"# Current robot state. While it is possible to\n"
"# rely on that the processing action servers obtain\n"
"# this information via subscribed topics, it should\n"
"# not be required to rely on it, hence the relevant\n"
"# current state of the robot can be passed here as well.\n"
"# All fields should be up-to-date when the action is called.\n"
"#####################################################\n"
"\n"
"# The current pose of the end effector in the world.\n"
"# This has to be equal to:\n"
"# {GraspData.grasp.grasp_pose - GraspData.grasp.approach.direction * GraspData.grasp.approach.desired_distance}.\n"
"# Which means the effector currently has to be at the pose at which after \n"
"# performing the gripper approach, it is at the GraspData.grasp.grasp_pose.\n"
"# If this is an ungrasp action, and ignore_effector_pose_ungrasp is\n"
"# set to true, checking this condition is skipped.\n"
"# This field may not be used by the implementation, because\n"
"# some implementations can use /tf transforms to determine\n"
"# the effector pose.\n"
"geometry_msgs/PoseStamped curr_effector_pose\n"
"\n"
"# The current joint state of the robot. \n"
"# This is to ensure the the robot is in the correct state\n"
"# for grasping/ungrasping actions\n"
"# (the arm joints in this state have to be equal to\n"
"# gripper_approach_trajectory.points[0]).\n"
"# If this is an ungrasp action, the gripper joints\n"
"# in this state may be ignored, as they should not\n"
"# be part of gripper_approach_trajectory anyway.\n"
"sensor_msgs/JointState curr_joint_state\n"
"\n"
"\n"
"================================================================================\n"
"MSG: grasp_execution_msgs/GraspData\n"
"# An identifier for this particular grasp action\n"
"int32 id\n"
"\n"
"# the grasp to perform\n"
"moveit_msgs/Grasp grasp \n"
"\n"
"# the name of the effector link (the one which the grasp refers to).\n"
"# This is needed to check whether according to /tf transforms,\n"
"# the link is at the right position (grasp.reach_pose) in order to\n"
"# accept the grasp. \n"
"string effector_link_name\n"
"\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/Grasp\n"
"# This message contains a description of a grasp that would be used\n"
"# with a particular end-effector to grasp an object, including how to\n"
"# approach it, grip it, etc.  This message does not contain any\n"
"# information about a \"grasp point\" (a position ON the object).\n"
"# Whatever generates this message should have already combined\n"
"# information about grasp points with information about the geometry\n"
"# of the end-effector to compute the grasp_pose in this message.\n"
"\n"
"# A name for this grasp\n"
"string id\n"
"\n"
"# The internal posture of the hand for the pre-grasp\n"
"# only positions are used\n"
"trajectory_msgs/JointTrajectory pre_grasp_posture\n"
"\n"
"# The internal posture of the hand for the grasp\n"
"# positions and efforts are used\n"
"trajectory_msgs/JointTrajectory grasp_posture\n"
"\n"
"# The position of the end-effector for the grasp.  This is the pose of\n"
"# the \"parent_link\" of the end-effector, not actually the pose of any\n"
"# link *in* the end-effector.  Typically this would be the pose of the\n"
"# most distal wrist link before the hand (end-effector) links began.\n"
"geometry_msgs/PoseStamped grasp_pose\n"
"\n"
"# The estimated probability of success for this grasp, or some other\n"
"# measure of how \"good\" it is.\n"
"float64 grasp_quality\n"
"\n"
"# The approach direction to take before picking an object\n"
"GripperTranslation pre_grasp_approach\n"
"\n"
"# The retreat direction to take after a grasp has been completed (object is attached)\n"
"GripperTranslation post_grasp_retreat\n"
"\n"
"# The retreat motion to perform when releasing the object; this information\n"
"# is not necessary for the grasp itself, but when releasing the object,\n"
"# the information will be necessary. The grasp used to perform a pickup\n"
"# is returned as part of the result, so this information is available for \n"
"# later use.\n"
"GripperTranslation post_place_retreat\n"
"\n"
"# the maximum contact force to use while grasping (<=0 to disable)\n"
"float32 max_contact_force\n"
"\n"
"# an optional list of obstacles that we have semantic information about\n"
"# and that can be touched/pushed/moved in the course of grasping\n"
"string[] allowed_touch_objects\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: moveit_msgs/GripperTranslation\n"
"# defines a translation for the gripper, used in pickup or place tasks\n"
"# for example for lifting an object off a table or approaching the table for placing\n"
"\n"
"# the direction of the translation\n"
"geometry_msgs/Vector3Stamped direction\n"
"\n"
"# the desired translation distance\n"
"float32 desired_distance\n"
"\n"
"# the min distance that must be considered feasible before the\n"
"# grasp is even attempted\n"
"float32 min_distance\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3Stamped\n"
"# This represents a Vector3 with reference coordinate frame and timestamp\n"
"Header header\n"
"Vector3 vector\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
;
  }

  static const char* value(const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.goal_id);
      stream.next(m.goal);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspActionGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_execution_msgs::GraspActionGoal_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "goal_id: ";
    s << std::endl;
    Printer< ::actionlib_msgs::GoalID_<ContainerAllocator> >::stream(s, indent + "  ", v.goal_id);
    s << indent << "goal: ";
    s << std::endl;
    Printer< ::grasp_execution_msgs::GraspGoal_<ContainerAllocator> >::stream(s, indent + "  ", v.goal);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_EXECUTION_MSGS_MESSAGE_GRASPACTIONGOAL_H
