// Generated by gencpp from file grasp_execution_msgs/GraspControlGoal.msg
// DO NOT EDIT!


#ifndef GRASP_EXECUTION_MSGS_MESSAGE_GRASPCONTROLGOAL_H
#define GRASP_EXECUTION_MSGS_MESSAGE_GRASPCONTROLGOAL_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <sensor_msgs/JointState.h>
#include <trajectory_msgs/JointTrajectory.h>

namespace grasp_execution_msgs
{
template <class ContainerAllocator>
struct GraspControlGoal_
{
  typedef GraspControlGoal_<ContainerAllocator> Type;

  GraspControlGoal_()
    : target_joint_state()
    , trajectory()
    , use_trajectory(false)
    , closing(false)  {
    }
  GraspControlGoal_(const ContainerAllocator& _alloc)
    : target_joint_state(_alloc)
    , trajectory(_alloc)
    , use_trajectory(false)
    , closing(false)  {
  (void)_alloc;
    }



   typedef  ::sensor_msgs::JointState_<ContainerAllocator>  _target_joint_state_type;
  _target_joint_state_type target_joint_state;

   typedef  ::trajectory_msgs::JointTrajectory_<ContainerAllocator>  _trajectory_type;
  _trajectory_type trajectory;

   typedef uint8_t _use_trajectory_type;
  _use_trajectory_type use_trajectory;

   typedef uint8_t _closing_type;
  _closing_type closing;





  typedef boost::shared_ptr< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> const> ConstPtr;

}; // struct GraspControlGoal_

typedef ::grasp_execution_msgs::GraspControlGoal_<std::allocator<void> > GraspControlGoal;

typedef boost::shared_ptr< ::grasp_execution_msgs::GraspControlGoal > GraspControlGoalPtr;
typedef boost::shared_ptr< ::grasp_execution_msgs::GraspControlGoal const> GraspControlGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator1> & lhs, const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator2> & rhs)
{
  return lhs.target_joint_state == rhs.target_joint_state &&
    lhs.trajectory == rhs.trajectory &&
    lhs.use_trajectory == rhs.use_trajectory &&
    lhs.closing == rhs.closing;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator1> & lhs, const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_execution_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f165f7e4a930636e7a3721777f2e4b0c";
  }

  static const char* value(const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf165f7e4a930636eULL;
  static const uint64_t static_value2 = 0x7a3721777f2e4b0cULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_execution_msgs/GraspControlGoal";
  }

  static const char* value(const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# This action sends a command to the hand to open or close the grasp.\n"
"# It can be used like a JointTrajectory action. Alternatively, the joint\n"
"# trajectory can be left unspecified, and the hand just closes.\n"
"# Accepting nodes can handle force feedback control or stop closing\n"
"# the fingers before the target joint state, if they are not moving any more. \n"
"\n"
"# The target joint state. This may include the efforts which\n"
"# the hand is to apply once the grip is closed.\n"
"sensor_msgs/JointState target_joint_state\n"
"\n"
"# optional: if the gripper movement is more complex, it can be specified\n"
"# as a joint trajectory action. In this case, target_joint_state should\n"
"# be set to the last state in the JointTrajectory\n"
"trajectory_msgs/JointTrajectory trajectory\n"
"\n"
"# If the joint trajectory is to be used instead of the simple closing action,\n"
"# set this to true. If this is false, the trajectory field is ingnored.\n"
"bool use_trajectory\n"
"\n"
"# true if this is an action to close the hand, false if it is opening.\n"
"bool closing\n"
"\n"
"\n"
"================================================================================\n"
"MSG: sensor_msgs/JointState\n"
"# This is a message that holds data to describe the state of a set of torque controlled joints. \n"
"#\n"
"# The state of each joint (revolute or prismatic) is defined by:\n"
"#  * the position of the joint (rad or m),\n"
"#  * the velocity of the joint (rad/s or m/s) and \n"
"#  * the effort that is applied in the joint (Nm or N).\n"
"#\n"
"# Each joint is uniquely identified by its name\n"
"# The header specifies the time at which the joint states were recorded. All the joint states\n"
"# in one message have to be recorded at the same time.\n"
"#\n"
"# This message consists of a multiple arrays, one for each part of the joint state. \n"
"# The goal is to make each of the fields optional. When e.g. your joints have no\n"
"# effort associated with them, you can leave the effort array empty. \n"
"#\n"
"# All arrays in this message should have the same size, or be empty.\n"
"# This is the only way to uniquely associate the joint name with the correct\n"
"# states.\n"
"\n"
"\n"
"Header header\n"
"\n"
"string[] name\n"
"float64[] position\n"
"float64[] velocity\n"
"float64[] effort\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectory\n"
"Header header\n"
"string[] joint_names\n"
"JointTrajectoryPoint[] points\n"
"================================================================================\n"
"MSG: trajectory_msgs/JointTrajectoryPoint\n"
"# Each trajectory point specifies either positions[, velocities[, accelerations]]\n"
"# or positions[, effort] for the trajectory to be executed.\n"
"# All specified values are in the same order as the joint names in JointTrajectory.msg\n"
"\n"
"float64[] positions\n"
"float64[] velocities\n"
"float64[] accelerations\n"
"float64[] effort\n"
"duration time_from_start\n"
;
  }

  static const char* value(const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.target_joint_state);
      stream.next(m.trajectory);
      stream.next(m.use_trajectory);
      stream.next(m.closing);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GraspControlGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_execution_msgs::GraspControlGoal_<ContainerAllocator>& v)
  {
    s << indent << "target_joint_state: ";
    s << std::endl;
    Printer< ::sensor_msgs::JointState_<ContainerAllocator> >::stream(s, indent + "  ", v.target_joint_state);
    s << indent << "trajectory: ";
    s << std::endl;
    Printer< ::trajectory_msgs::JointTrajectory_<ContainerAllocator> >::stream(s, indent + "  ", v.trajectory);
    s << indent << "use_trajectory: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.use_trajectory);
    s << indent << "closing: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.closing);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_EXECUTION_MSGS_MESSAGE_GRASPCONTROLGOAL_H
