// Generated by gencpp from file grasp_planning_graspit_msgs/AddToDatabaseRequest.msg
// DO NOT EDIT!


#ifndef GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_ADDTODATABASEREQUEST_H
#define GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_ADDTODATABASEREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace grasp_planning_graspit_msgs
{
template <class ContainerAllocator>
struct AddToDatabaseRequest_
{
  typedef AddToDatabaseRequest_<ContainerAllocator> Type;

  AddToDatabaseRequest_()
    : filename()
    , isRobot(false)
    , asGraspable(false)
    , modelName()
    , jointNames()  {
    }
  AddToDatabaseRequest_(const ContainerAllocator& _alloc)
    : filename(_alloc)
    , isRobot(false)
    , asGraspable(false)
    , modelName(_alloc)
    , jointNames(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;

   typedef uint8_t _isRobot_type;
  _isRobot_type isRobot;

   typedef uint8_t _asGraspable_type;
  _asGraspable_type asGraspable;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _modelName_type;
  _modelName_type modelName;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > , typename ContainerAllocator::template rebind<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::other >  _jointNames_type;
  _jointNames_type jointNames;





  typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> const> ConstPtr;

}; // struct AddToDatabaseRequest_

typedef ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<std::allocator<void> > AddToDatabaseRequest;

typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::AddToDatabaseRequest > AddToDatabaseRequestPtr;
typedef boost::shared_ptr< ::grasp_planning_graspit_msgs::AddToDatabaseRequest const> AddToDatabaseRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator1> & lhs, const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator2> & rhs)
{
  return lhs.filename == rhs.filename &&
    lhs.isRobot == rhs.isRobot &&
    lhs.asGraspable == rhs.asGraspable &&
    lhs.modelName == rhs.modelName &&
    lhs.jointNames == rhs.jointNames;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator1> & lhs, const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace grasp_planning_graspit_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5ab6c9f30acc0ca8b3199d205c07915a";
  }

  static const char* value(const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5ab6c9f30acc0ca8ULL;
  static const uint64_t static_value2 = 0xb3199d205c07915aULL;
};

template<class ContainerAllocator>
struct DataType< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "grasp_planning_graspit_msgs/AddToDatabaseRequest";
  }

  static const char* value(const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Requests to add a Graspit model to the database\n"
"# This does not load it into the current GraspIt world.\n"
"# Request loading of the databse into the GraspIt world\n"
"# needs to be done with another service.\n"
"\n"
"# the GraspIt! XML file to load. Can only be a robot or\n"
"# object file. Adding whole worlds to databases is not\n"
"# supported.\n"
"string filename\n"
"\n"
"# true if the file is a robot file, false if it is an object file\n"
"bool isRobot\n"
"\n"
"# only used if isRobot=false: Load the object as graspable\n"
"# object. If false, the object is loaded as obstacle. \n"
"bool asGraspable\n"
"\n"
"# set a unique model name for the database. If a model\n"
"# with this name exists in the database already, the service\n"
"# request will fail, and you have to try another name.\n"
"string modelName\n"
"\n"
"# if this is a robot file, this array contains the URDF finger\n"
"# joint names in the order they are specified in the graspit file.\n"
"string[] jointNames\n"
"\n"
;
  }

  static const char* value(const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.filename);
      stream.next(m.isRobot);
      stream.next(m.asGraspable);
      stream.next(m.modelName);
      stream.next(m.jointNames);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct AddToDatabaseRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::grasp_planning_graspit_msgs::AddToDatabaseRequest_<ContainerAllocator>& v)
  {
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
    s << indent << "isRobot: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.isRobot);
    s << indent << "asGraspable: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.asGraspable);
    s << indent << "modelName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.modelName);
    s << indent << "jointNames[]" << std::endl;
    for (size_t i = 0; i < v.jointNames.size(); ++i)
    {
      s << indent << "  jointNames[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.jointNames[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // GRASP_PLANNING_GRASPIT_MSGS_MESSAGE_ADDTODATABASEREQUEST_H
