# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from grasp_execution_msgs/GraspActionGoal.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import actionlib_msgs.msg
import genpy
import geometry_msgs.msg
import grasp_execution_msgs.msg
import moveit_msgs.msg
import sensor_msgs.msg
import std_msgs.msg
import trajectory_msgs.msg

class GraspActionGoal(genpy.Message):
  _md5sum = "d7e0f500a2cd74e04525e295c7517b6b"
  _type = "grasp_execution_msgs/GraspActionGoal"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
GraspGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: grasp_execution_msgs/GraspGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# the grasp / ungrasp to perform
grasp_execution_msgs/GraspData grasp 

# true if this is a grasping action,
# false if this is an ungrasp action.
bool is_grasp

# For an ungrasping action, there may be an expected
# end effector pose for the action to be eligible,
# e.g. at a pose where to place an object.
# The expected end effector pose is specified in 
# GraspData.grasp.grasp_pose (for both grasping and
# ungrasping actions). However sometimes,
# the action should be eligible anywhere
# (i.e. the object may be dropped anywhere).
# To allow the ungrasp action to be eligible anywhere,
# set this to true.
bool ignore_effector_pose_ungrasp

# The joint trajectory to move from curr_effector_pose 
# along the *approach* GripperTranslation specified
# in the Grasp.msg message (contained in GraspData.msg).
# For an ungrasp action, this trajectory should not include
# the gripper joints, because they should not move while
# holding the object, and the exact state of the grippers
# while holding the object can vary and
# cannot be foreseen exactly.
trajectory_msgs/JointTrajectory gripper_approach_trajectory

# The joint trajectory to move from the grasp pose, after
# doint the grasp, along the *retreat* GripperTranslation specified
# in the Grasp.msg message (contained in GraspData.msg).
# For a grasp action, this trajectory should not include
# the gripper joints, because they should not move while
# holding the object, and the exact state of the grippers
# while holding the object can vary and
# cannot be foreseen exactly.
trajectory_msgs/JointTrajectory gripper_retreat_trajectory

# The joint trajectory to open/close the grippers, i.e. to move from
# GraspData.grasp.pre_grasp_posture to
# GraspData.grasp.grasp_posture, or the other way round if
# this is an action to un-grasp.
# In its simplest form, the first point in this trajectory
# is the current joint state, and the second point is
# the target state specified in grasp.grasp.grasp_posture
# if this is a grasp, or grasp.grasp.pre_grasp_posture if
# this is an ungrasp.
trajectory_msgs/JointTrajectory grasp_trajectory

# set to true if you want to use effector_pos_tolerance,
# effector_angle_tolerance and joint_angles_tolerance
# for determining whether the end effector / the joints
# are at the correct pose.
# Set to false if default tolerances are to be used.
bool use_custom_tolerances

# the grasp is only executed if the robot's effector is at the
# correct pose, plus this tolerance
float32 effector_pos_tolerance

# the grasp is only executed if the robot's effector is at the
# correct orientation, plus this tolerance (in rad)
float32 effector_angle_tolerance

# tolerance allowed for all joints to be at a desirec
# position (GraspData.grasp.grasp_posture and
# GraspData.grasp.pre_grasp_posture). 
float32 joint_angles_tolerance


#####################################################
# Current robot state. While it is possible to
# rely on that the processing action servers obtain
# this information via subscribed topics, it should
# not be required to rely on it, hence the relevant
# current state of the robot can be passed here as well.
# All fields should be up-to-date when the action is called.
#####################################################

# The current pose of the end effector in the world.
# This has to be equal to:
# {GraspData.grasp.grasp_pose - GraspData.grasp.approach.direction * GraspData.grasp.approach.desired_distance}.
# Which means the effector currently has to be at the pose at which after 
# performing the gripper approach, it is at the GraspData.grasp.grasp_pose.
# If this is an ungrasp action, and ignore_effector_pose_ungrasp is
# set to true, checking this condition is skipped.
# This field may not be used by the implementation, because
# some implementations can use /tf transforms to determine
# the effector pose.
geometry_msgs/PoseStamped curr_effector_pose

# The current joint state of the robot. 
# This is to ensure the the robot is in the correct state
# for grasping/ungrasping actions
# (the arm joints in this state have to be equal to
# gripper_approach_trajectory.points[0]).
# If this is an ungrasp action, the gripper joints
# in this state may be ignored, as they should not
# be part of gripper_approach_trajectory anyway.
sensor_msgs/JointState curr_joint_state


================================================================================
MSG: grasp_execution_msgs/GraspData
# An identifier for this particular grasp action
int32 id

# the grasp to perform
moveit_msgs/Grasp grasp 

# the name of the effector link (the one which the grasp refers to).
# This is needed to check whether according to /tf transforms,
# the link is at the right position (grasp.reach_pose) in order to
# accept the grasp. 
string effector_link_name


================================================================================
MSG: moveit_msgs/Grasp
# This message contains a description of a grasp that would be used
# with a particular end-effector to grasp an object, including how to
# approach it, grip it, etc.  This message does not contain any
# information about a "grasp point" (a position ON the object).
# Whatever generates this message should have already combined
# information about grasp points with information about the geometry
# of the end-effector to compute the grasp_pose in this message.

# A name for this grasp
string id

# The internal posture of the hand for the pre-grasp
# only positions are used
trajectory_msgs/JointTrajectory pre_grasp_posture

# The internal posture of the hand for the grasp
# positions and efforts are used
trajectory_msgs/JointTrajectory grasp_posture

# The position of the end-effector for the grasp.  This is the pose of
# the "parent_link" of the end-effector, not actually the pose of any
# link *in* the end-effector.  Typically this would be the pose of the
# most distal wrist link before the hand (end-effector) links began.
geometry_msgs/PoseStamped grasp_pose

# The estimated probability of success for this grasp, or some other
# measure of how "good" it is.
float64 grasp_quality

# The approach direction to take before picking an object
GripperTranslation pre_grasp_approach

# The retreat direction to take after a grasp has been completed (object is attached)
GripperTranslation post_grasp_retreat

# The retreat motion to perform when releasing the object; this information
# is not necessary for the grasp itself, but when releasing the object,
# the information will be necessary. The grasp used to perform a pickup
# is returned as part of the result, so this information is available for 
# later use.
GripperTranslation post_place_retreat

# the maximum contact force to use while grasping (<=0 to disable)
float32 max_contact_force

# an optional list of obstacles that we have semantic information about
# and that can be touched/pushed/moved in the course of grasping
string[] allowed_touch_objects

================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
# Each trajectory point specifies either positions[, velocities[, accelerations]]
# or positions[, effort] for the trajectory to be executed.
# All specified values are in the same order as the joint names in JointTrajectory.msg

float64[] positions
float64[] velocities
float64[] accelerations
float64[] effort
duration time_from_start

================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: moveit_msgs/GripperTranslation
# defines a translation for the gripper, used in pickup or place tasks
# for example for lifting an object off a table or approaching the table for placing

# the direction of the translation
geometry_msgs/Vector3Stamped direction

# the desired translation distance
float32 desired_distance

# the min distance that must be considered feasible before the
# grasp is even attempted
float32 min_distance

================================================================================
MSG: geometry_msgs/Vector3Stamped
# This represents a Vector3 with reference coordinate frame and timestamp
Header header
Vector3 vector

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: sensor_msgs/JointState
# This is a message that holds data to describe the state of a set of torque controlled joints. 
#
# The state of each joint (revolute or prismatic) is defined by:
#  * the position of the joint (rad or m),
#  * the velocity of the joint (rad/s or m/s) and 
#  * the effort that is applied in the joint (Nm or N).
#
# Each joint is uniquely identified by its name
# The header specifies the time at which the joint states were recorded. All the joint states
# in one message have to be recorded at the same time.
#
# This message consists of a multiple arrays, one for each part of the joint state. 
# The goal is to make each of the fields optional. When e.g. your joints have no
# effort associated with them, you can leave the effort array empty. 
#
# All arrays in this message should have the same size, or be empty.
# This is the only way to uniquely associate the joint name with the correct
# states.


Header header

string[] name
float64[] position
float64[] velocity
float64[] effort
"""
  __slots__ = ['header','goal_id','goal']
  _slot_types = ['std_msgs/Header','actionlib_msgs/GoalID','grasp_execution_msgs/GraspGoal']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,goal_id,goal

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GraspActionGoal, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = grasp_execution_msgs.msg.GraspGoal()
    else:
      self.header = std_msgs.msg.Header()
      self.goal_id = actionlib_msgs.msg.GoalID()
      self.goal = grasp_execution_msgs.msg.GraspGoal()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.grasp.id
      buff.write(_get_struct_i().pack(_x))
      _x = self.goal.grasp.grasp.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.pre_grasp_posture.header.seq, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.pre_grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp.grasp.pre_grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.pre_grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp.grasp.pre_grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.pre_grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.grasp_posture.header.seq, _x.goal.grasp.grasp.grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.grasp_posture.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp.grasp.grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp.grasp.grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v2 = val1.time_from_start
        _x = _v2
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.grasp_pose.header.seq, _x.goal.grasp.grasp.grasp_pose.header.stamp.secs, _x.goal.grasp.grasp.grasp_pose.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8d3I().pack(_x.goal.grasp.grasp.grasp_pose.pose.position.x, _x.goal.grasp.grasp.grasp_pose.pose.position.y, _x.goal.grasp.grasp.grasp_pose.pose.position.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.x, _x.goal.grasp.grasp.grasp_pose.pose.orientation.y, _x.goal.grasp.grasp.grasp_pose.pose.orientation.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.w, _x.goal.grasp.grasp.grasp_quality, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.seq, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f3I().pack(_x.goal.grasp.grasp.pre_grasp_approach.direction.vector.x, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.y, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.z, _x.goal.grasp.grasp.pre_grasp_approach.desired_distance, _x.goal.grasp.grasp.pre_grasp_approach.min_distance, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.seq, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f3I().pack(_x.goal.grasp.grasp.post_grasp_retreat.direction.vector.x, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.y, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.z, _x.goal.grasp.grasp.post_grasp_retreat.desired_distance, _x.goal.grasp.grasp.post_grasp_retreat.min_distance, _x.goal.grasp.grasp.post_place_retreat.direction.header.seq, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.goal.grasp.grasp.post_place_retreat.direction.vector.x, _x.goal.grasp.grasp.post_place_retreat.direction.vector.y, _x.goal.grasp.grasp.post_place_retreat.direction.vector.z, _x.goal.grasp.grasp.post_place_retreat.desired_distance, _x.goal.grasp.grasp.post_place_retreat.min_distance, _x.goal.grasp.grasp.max_contact_force))
      length = len(self.goal.grasp.grasp.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.goal.grasp.effector_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.goal.is_grasp, _x.goal.ignore_effector_pose_ungrasp, _x.goal.gripper_approach_trajectory.header.seq, _x.goal.gripper_approach_trajectory.header.stamp.secs, _x.goal.gripper_approach_trajectory.header.stamp.nsecs))
      _x = self.goal.gripper_approach_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.gripper_approach_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_approach_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.gripper_approach_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_approach_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v3 = val1.time_from_start
        _x = _v3
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.gripper_retreat_trajectory.header.seq, _x.goal.gripper_retreat_trajectory.header.stamp.secs, _x.goal.gripper_retreat_trajectory.header.stamp.nsecs))
      _x = self.goal.gripper_retreat_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.gripper_retreat_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_retreat_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.gripper_retreat_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_retreat_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v4 = val1.time_from_start
        _x = _v4
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp_trajectory.header.seq, _x.goal.grasp_trajectory.header.stamp.secs, _x.goal.grasp_trajectory.header.stamp.nsecs))
      _x = self.goal.grasp_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.effort))
        _v5 = val1.time_from_start
        _x = _v5
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_B3f3I().pack(_x.goal.use_custom_tolerances, _x.goal.effector_pos_tolerance, _x.goal.effector_angle_tolerance, _x.goal.joint_angles_tolerance, _x.goal.curr_effector_pose.header.seq, _x.goal.curr_effector_pose.header.stamp.secs, _x.goal.curr_effector_pose.header.stamp.nsecs))
      _x = self.goal.curr_effector_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.goal.curr_effector_pose.pose.position.x, _x.goal.curr_effector_pose.pose.position.y, _x.goal.curr_effector_pose.pose.position.z, _x.goal.curr_effector_pose.pose.orientation.x, _x.goal.curr_effector_pose.pose.orientation.y, _x.goal.curr_effector_pose.pose.orientation.z, _x.goal.curr_effector_pose.pose.orientation.w, _x.goal.curr_joint_state.header.seq, _x.goal.curr_joint_state.header.stamp.secs, _x.goal.curr_joint_state.header.stamp.nsecs))
      _x = self.goal.curr_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.curr_joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.curr_joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.curr_joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.curr_joint_state.position))
      length = len(self.goal.curr_joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.curr_joint_state.velocity))
      length = len(self.goal.curr_joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.goal.curr_joint_state.effort))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = grasp_execution_msgs.msg.GraspGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (self.goal.grasp.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.pre_grasp_posture.header.seq, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.pre_grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.pre_grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.pre_grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.pre_grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.pre_grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v6 = val1.time_from_start
        _x = _v6
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp.grasp.pre_grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.grasp_posture.header.seq, _x.goal.grasp.grasp.grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.grasp_posture.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v7 = val1.time_from_start
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp.grasp.grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.grasp_pose.header.seq, _x.goal.grasp.grasp.grasp_pose.header.stamp.secs, _x.goal.grasp.grasp.grasp_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.goal.grasp.grasp.grasp_pose.pose.position.x, _x.goal.grasp.grasp.grasp_pose.pose.position.y, _x.goal.grasp.grasp.grasp_pose.pose.position.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.x, _x.goal.grasp.grasp.grasp_pose.pose.orientation.y, _x.goal.grasp.grasp.grasp_pose.pose.orientation.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.w, _x.goal.grasp.grasp.grasp_quality, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.seq, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.nsecs,) = _get_struct_8d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.goal.grasp.grasp.pre_grasp_approach.direction.vector.x, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.y, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.z, _x.goal.grasp.grasp.pre_grasp_approach.desired_distance, _x.goal.grasp.grasp.pre_grasp_approach.min_distance, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.seq, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.nsecs,) = _get_struct_3d2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.goal.grasp.grasp.post_grasp_retreat.direction.vector.x, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.y, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.z, _x.goal.grasp.grasp.post_grasp_retreat.desired_distance, _x.goal.grasp.grasp.post_grasp_retreat.min_distance, _x.goal.grasp.grasp.post_place_retreat.direction.header.seq, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.nsecs,) = _get_struct_3d2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.goal.grasp.grasp.post_place_retreat.direction.vector.x, _x.goal.grasp.grasp.post_place_retreat.direction.vector.y, _x.goal.grasp.grasp.post_place_retreat.direction.vector.z, _x.goal.grasp.grasp.post_place_retreat.desired_distance, _x.goal.grasp.grasp.post_place_retreat.min_distance, _x.goal.grasp.grasp.max_contact_force,) = _get_struct_3d3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.allowed_touch_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.effector_link_name = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.effector_link_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.goal.is_grasp, _x.goal.ignore_effector_pose_ungrasp, _x.goal.gripper_approach_trajectory.header.seq, _x.goal.gripper_approach_trajectory.header.stamp.secs, _x.goal.gripper_approach_trajectory.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      self.goal.is_grasp = bool(self.goal.is_grasp)
      self.goal.ignore_effector_pose_ungrasp = bool(self.goal.ignore_effector_pose_ungrasp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.gripper_approach_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.gripper_approach_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_approach_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.gripper_approach_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_approach_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v8 = val1.time_from_start
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.gripper_approach_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.gripper_retreat_trajectory.header.seq, _x.goal.gripper_retreat_trajectory.header.stamp.secs, _x.goal.gripper_retreat_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.gripper_retreat_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.gripper_retreat_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_retreat_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.gripper_retreat_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_retreat_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v9 = val1.time_from_start
        _x = _v9
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.gripper_retreat_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp_trajectory.header.seq, _x.goal.grasp_trajectory.header.stamp.secs, _x.goal.grasp_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = struct.unpack(pattern, str[start:end])
        _v10 = val1.time_from_start
        _x = _v10
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp_trajectory.points.append(val1)
      _x = self
      start = end
      end += 25
      (_x.goal.use_custom_tolerances, _x.goal.effector_pos_tolerance, _x.goal.effector_angle_tolerance, _x.goal.joint_angles_tolerance, _x.goal.curr_effector_pose.header.seq, _x.goal.curr_effector_pose.header.stamp.secs, _x.goal.curr_effector_pose.header.stamp.nsecs,) = _get_struct_B3f3I().unpack(str[start:end])
      self.goal.use_custom_tolerances = bool(self.goal.use_custom_tolerances)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.curr_effector_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.curr_effector_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.curr_effector_pose.pose.position.x, _x.goal.curr_effector_pose.pose.position.y, _x.goal.curr_effector_pose.pose.position.z, _x.goal.curr_effector_pose.pose.orientation.x, _x.goal.curr_effector_pose.pose.orientation.y, _x.goal.curr_effector_pose.pose.orientation.z, _x.goal.curr_effector_pose.pose.orientation.w, _x.goal.curr_joint_state.header.seq, _x.goal.curr_joint_state.header.stamp.secs, _x.goal.curr_joint_state.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.curr_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.curr_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.curr_joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.curr_joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.position = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.velocity = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.effort = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs))
      _x = self.goal_id.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.goal.grasp.id
      buff.write(_get_struct_i().pack(_x))
      _x = self.goal.grasp.grasp.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.pre_grasp_posture.header.seq, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.pre_grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp.grasp.pre_grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.pre_grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp.grasp.pre_grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.pre_grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v11 = val1.time_from_start
        _x = _v11
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.grasp_posture.header.seq, _x.goal.grasp.grasp.grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.grasp_posture.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.grasp_posture.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp.grasp.grasp_posture.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.grasp_posture.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp.grasp.grasp_posture.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.grasp_posture.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v12 = val1.time_from_start
        _x = _v12
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp.grasp.grasp_pose.header.seq, _x.goal.grasp.grasp.grasp_pose.header.stamp.secs, _x.goal.grasp.grasp.grasp_pose.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.grasp_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_8d3I().pack(_x.goal.grasp.grasp.grasp_pose.pose.position.x, _x.goal.grasp.grasp.grasp_pose.pose.position.y, _x.goal.grasp.grasp.grasp_pose.pose.position.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.x, _x.goal.grasp.grasp.grasp_pose.pose.orientation.y, _x.goal.grasp.grasp.grasp_pose.pose.orientation.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.w, _x.goal.grasp.grasp.grasp_quality, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.seq, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f3I().pack(_x.goal.grasp.grasp.pre_grasp_approach.direction.vector.x, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.y, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.z, _x.goal.grasp.grasp.pre_grasp_approach.desired_distance, _x.goal.grasp.grasp.pre_grasp_approach.min_distance, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.seq, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d2f3I().pack(_x.goal.grasp.grasp.post_grasp_retreat.direction.vector.x, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.y, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.z, _x.goal.grasp.grasp.post_grasp_retreat.desired_distance, _x.goal.grasp.grasp.post_grasp_retreat.min_distance, _x.goal.grasp.grasp.post_place_retreat.direction.header.seq, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.nsecs))
      _x = self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_3d3f().pack(_x.goal.grasp.grasp.post_place_retreat.direction.vector.x, _x.goal.grasp.grasp.post_place_retreat.direction.vector.y, _x.goal.grasp.grasp.post_place_retreat.direction.vector.z, _x.goal.grasp.grasp.post_place_retreat.desired_distance, _x.goal.grasp.grasp.post_place_retreat.min_distance, _x.goal.grasp.grasp.max_contact_force))
      length = len(self.goal.grasp.grasp.allowed_touch_objects)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp.grasp.allowed_touch_objects:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      _x = self.goal.grasp.effector_link_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2B3I().pack(_x.goal.is_grasp, _x.goal.ignore_effector_pose_ungrasp, _x.goal.gripper_approach_trajectory.header.seq, _x.goal.gripper_approach_trajectory.header.stamp.secs, _x.goal.gripper_approach_trajectory.header.stamp.nsecs))
      _x = self.goal.gripper_approach_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.gripper_approach_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_approach_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.gripper_approach_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_approach_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v13 = val1.time_from_start
        _x = _v13
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.gripper_retreat_trajectory.header.seq, _x.goal.gripper_retreat_trajectory.header.stamp.secs, _x.goal.gripper_retreat_trajectory.header.stamp.nsecs))
      _x = self.goal.gripper_retreat_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.gripper_retreat_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_retreat_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.gripper_retreat_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.gripper_retreat_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v14 = val1.time_from_start
        _x = _v14
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_3I().pack(_x.goal.grasp_trajectory.header.seq, _x.goal.grasp_trajectory.header.stamp.secs, _x.goal.grasp_trajectory.header.stamp.nsecs))
      _x = self.goal.grasp_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.grasp_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.grasp_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.grasp_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        length = len(val1.effort)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.effort.tostring())
        _v15 = val1.time_from_start
        _x = _v15
        buff.write(_get_struct_2i().pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_get_struct_B3f3I().pack(_x.goal.use_custom_tolerances, _x.goal.effector_pos_tolerance, _x.goal.effector_angle_tolerance, _x.goal.joint_angles_tolerance, _x.goal.curr_effector_pose.header.seq, _x.goal.curr_effector_pose.header.stamp.secs, _x.goal.curr_effector_pose.header.stamp.nsecs))
      _x = self.goal.curr_effector_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_7d3I().pack(_x.goal.curr_effector_pose.pose.position.x, _x.goal.curr_effector_pose.pose.position.y, _x.goal.curr_effector_pose.pose.position.z, _x.goal.curr_effector_pose.pose.orientation.x, _x.goal.curr_effector_pose.pose.orientation.y, _x.goal.curr_effector_pose.pose.orientation.z, _x.goal.curr_effector_pose.pose.orientation.w, _x.goal.curr_joint_state.header.seq, _x.goal.curr_joint_state.header.stamp.secs, _x.goal.curr_joint_state.header.stamp.nsecs))
      _x = self.goal.curr_joint_state.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.goal.curr_joint_state.name)
      buff.write(_struct_I.pack(length))
      for val1 in self.goal.curr_joint_state.name:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.goal.curr_joint_state.position)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.curr_joint_state.position.tostring())
      length = len(self.goal.curr_joint_state.velocity)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.curr_joint_state.velocity.tostring())
      length = len(self.goal.curr_joint_state.effort)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.goal.curr_joint_state.effort.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.goal_id is None:
        self.goal_id = actionlib_msgs.msg.GoalID()
      if self.goal is None:
        self.goal = grasp_execution_msgs.msg.GraspGoal()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.goal_id.stamp.secs, _x.goal_id.stamp.nsecs,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal_id.id = str[start:end].decode('utf-8')
      else:
        self.goal_id.id = str[start:end]
      start = end
      end += 4
      (self.goal.grasp.id,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.id = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.pre_grasp_posture.header.seq, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_posture.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.pre_grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.pre_grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.pre_grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.pre_grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.pre_grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v16 = val1.time_from_start
        _x = _v16
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp.grasp.pre_grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.grasp_posture.header.seq, _x.goal.grasp.grasp.grasp_posture.header.stamp.secs, _x.goal.grasp.grasp.grasp_posture.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.grasp_posture.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.grasp_posture.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.grasp_posture.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.grasp_posture.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.grasp_posture.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v17 = val1.time_from_start
        _x = _v17
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp.grasp.grasp_posture.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp.grasp.grasp_pose.header.seq, _x.goal.grasp.grasp.grasp_pose.header.stamp.secs, _x.goal.grasp.grasp.grasp_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.grasp_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.grasp_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.goal.grasp.grasp.grasp_pose.pose.position.x, _x.goal.grasp.grasp.grasp_pose.pose.position.y, _x.goal.grasp.grasp.grasp_pose.pose.position.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.x, _x.goal.grasp.grasp.grasp_pose.pose.orientation.y, _x.goal.grasp.grasp.grasp_pose.pose.orientation.z, _x.goal.grasp.grasp.grasp_pose.pose.orientation.w, _x.goal.grasp.grasp.grasp_quality, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.seq, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.secs, _x.goal.grasp.grasp.pre_grasp_approach.direction.header.stamp.nsecs,) = _get_struct_8d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.pre_grasp_approach.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.goal.grasp.grasp.pre_grasp_approach.direction.vector.x, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.y, _x.goal.grasp.grasp.pre_grasp_approach.direction.vector.z, _x.goal.grasp.grasp.pre_grasp_approach.desired_distance, _x.goal.grasp.grasp.pre_grasp_approach.min_distance, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.seq, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_grasp_retreat.direction.header.stamp.nsecs,) = _get_struct_3d2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.post_grasp_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 44
      (_x.goal.grasp.grasp.post_grasp_retreat.direction.vector.x, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.y, _x.goal.grasp.grasp.post_grasp_retreat.direction.vector.z, _x.goal.grasp.grasp.post_grasp_retreat.desired_distance, _x.goal.grasp.grasp.post_grasp_retreat.min_distance, _x.goal.grasp.grasp.post_place_retreat.direction.header.seq, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.secs, _x.goal.grasp.grasp.post_place_retreat.direction.header.stamp.nsecs,) = _get_struct_3d2f3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.grasp.post_place_retreat.direction.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 36
      (_x.goal.grasp.grasp.post_place_retreat.direction.vector.x, _x.goal.grasp.grasp.post_place_retreat.direction.vector.y, _x.goal.grasp.grasp.post_place_retreat.direction.vector.z, _x.goal.grasp.grasp.post_place_retreat.desired_distance, _x.goal.grasp.grasp.post_place_retreat.min_distance, _x.goal.grasp.grasp.max_contact_force,) = _get_struct_3d3f().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp.grasp.allowed_touch_objects = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp.grasp.allowed_touch_objects.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp.effector_link_name = str[start:end].decode('utf-8')
      else:
        self.goal.grasp.effector_link_name = str[start:end]
      _x = self
      start = end
      end += 14
      (_x.goal.is_grasp, _x.goal.ignore_effector_pose_ungrasp, _x.goal.gripper_approach_trajectory.header.seq, _x.goal.gripper_approach_trajectory.header.stamp.secs, _x.goal.gripper_approach_trajectory.header.stamp.nsecs,) = _get_struct_2B3I().unpack(str[start:end])
      self.goal.is_grasp = bool(self.goal.is_grasp)
      self.goal.ignore_effector_pose_ungrasp = bool(self.goal.ignore_effector_pose_ungrasp)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.gripper_approach_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.gripper_approach_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_approach_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.gripper_approach_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_approach_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v18 = val1.time_from_start
        _x = _v18
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.gripper_approach_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.gripper_retreat_trajectory.header.seq, _x.goal.gripper_retreat_trajectory.header.stamp.secs, _x.goal.gripper_retreat_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.gripper_retreat_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.gripper_retreat_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_retreat_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.gripper_retreat_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.gripper_retreat_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v19 = val1.time_from_start
        _x = _v19
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.gripper_retreat_trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.goal.grasp_trajectory.header.seq, _x.goal.grasp_trajectory.header.stamp.secs, _x.goal.grasp_trajectory.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.grasp_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.grasp_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.grasp_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.grasp_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v20 = val1.time_from_start
        _x = _v20
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2i().unpack(str[start:end])
        self.goal.grasp_trajectory.points.append(val1)
      _x = self
      start = end
      end += 25
      (_x.goal.use_custom_tolerances, _x.goal.effector_pos_tolerance, _x.goal.effector_angle_tolerance, _x.goal.joint_angles_tolerance, _x.goal.curr_effector_pose.header.seq, _x.goal.curr_effector_pose.header.stamp.secs, _x.goal.curr_effector_pose.header.stamp.nsecs,) = _get_struct_B3f3I().unpack(str[start:end])
      self.goal.use_custom_tolerances = bool(self.goal.use_custom_tolerances)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.curr_effector_pose.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.curr_effector_pose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.goal.curr_effector_pose.pose.position.x, _x.goal.curr_effector_pose.pose.position.y, _x.goal.curr_effector_pose.pose.position.z, _x.goal.curr_effector_pose.pose.orientation.x, _x.goal.curr_effector_pose.pose.orientation.y, _x.goal.curr_effector_pose.pose.orientation.z, _x.goal.curr_effector_pose.pose.orientation.w, _x.goal.curr_joint_state.header.seq, _x.goal.curr_joint_state.header.stamp.secs, _x.goal.curr_joint_state.header.stamp.nsecs,) = _get_struct_7d3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.curr_joint_state.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.curr_joint_state.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.goal.curr_joint_state.name = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.goal.curr_joint_state.name.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.position = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.velocity = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.goal.curr_joint_state.effort = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B3I = None
def _get_struct_2B3I():
    global _struct_2B3I
    if _struct_2B3I is None:
        _struct_2B3I = struct.Struct("<2B3I")
    return _struct_2B3I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2i = None
def _get_struct_2i():
    global _struct_2i
    if _struct_2i is None:
        _struct_2i = struct.Struct("<2i")
    return _struct_2i
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d2f3I = None
def _get_struct_3d2f3I():
    global _struct_3d2f3I
    if _struct_3d2f3I is None:
        _struct_3d2f3I = struct.Struct("<3d2f3I")
    return _struct_3d2f3I
_struct_3d3f = None
def _get_struct_3d3f():
    global _struct_3d3f
    if _struct_3d3f is None:
        _struct_3d3f = struct.Struct("<3d3f")
    return _struct_3d3f
_struct_7d3I = None
def _get_struct_7d3I():
    global _struct_7d3I
    if _struct_7d3I is None:
        _struct_7d3I = struct.Struct("<7d3I")
    return _struct_7d3I
_struct_8d3I = None
def _get_struct_8d3I():
    global _struct_8d3I
    if _struct_8d3I is None:
        _struct_8d3I = struct.Struct("<8d3I")
    return _struct_8d3I
_struct_B3f3I = None
def _get_struct_B3f3I():
    global _struct_B3f3I
    if _struct_B3f3I is None:
        _struct_B3f3I = struct.Struct("<B3f3I")
    return _struct_B3f3I
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
